cmake_minimum_required(VERSION 3.5)

project(interprocess_eval)

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

#if(NOT WIN32)
#  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra")
#endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

#find_package(catkin REQUIRED COMPONENTS roscpp std_msgs)
find_package(ament_cmake REQUIRED)
find_package(example_interfaces REQUIRED)
find_package(rcutils)
find_package(rclcpp REQUIRED)
find_package(rmw_implementation_cmake REQUIRED)
find_package(rmw REQUIRED)
find_package(std_msgs REQUIRED)

#catkin_package()

function(custom_executable target)
  add_executable(${target} src/${target}.cpp)

  #include_directories(${catkin_INCLUDE_DIRS})
  #target_link_libraries(talker ${catkin_LIBRARIES})
  ament_target_dependencies(${target}
    "example_interfaces"
    "rclcpp"
    "rcutils"
    "std_msgs"
    "rt")

  #install(TARGETS talker
  #  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})
  install(TARGETS ${target}
    DESTINATION bin/${PROJECT_NAME})

endfunction()

#macro(targets)
#  if(NOT "${target_suffix} " STREQUAL " ")
#    get_rclcpp_information("${rmw_implementation}" "rclcpp${target_suffix}")
#  endif()

custom_executable(talker_interprocess)
custom_executable(listener_interprocess)
custom_executable(talker_interprocess_single)
custom_executable(listener_interprocess_single)

#endmacro()

# call_for_each_rmw_implementation(targets GENERATE_DEFAULT)

ament_package()
